var es global, es propenso a errores, mejor usar let que tiene alcance de bloque
switch se usa asi:
switch (expresion) {
  case valor1:
    // Código si expresion === valor1
    break;

  case valor2:
    // Código si expresion === valor2
    break;

  default:
    // Código si ningún case coincide
    break;
}
estructuras:
while vs do while: while primero verifica la variable luego ejecuta el bucle, por el contrario do while primero ejecuta y luego verifica el bucle
let j = 0;

do {
  console.log("do while:", j);
  j++;
} while (j < 3);

metodos de arrays:
push() // le agrega al final uno o varios items separados por comas a un array
pop()// elimina el último item del array, devuelve el mismo elemento eliminado 
array.shift() // elimina el primer item de un array
array.unshift() añade uno o varios items al principio del array separados por comas. retorna la longitud nueva.
array.join(separador) // une todos los items en un string separados con un separador.
array.indexOf(contenido) // busca un item con el contenido y devuelve un indice
array.lastIndexOf(contenido) // igual que indexif solo que funciona a la inversa. comienza por el final del arreglo 
array.includes(contenido) // devuelve un booleano al buscar en el array
metodos de strings:
str.lenght // devuelve el largo
str.indexOf(contenido) // busca una cadena y devuelve el índice donde lo encontro
str.slice() // corta la cadena, inicio fin o con valores negativos, cuenta desde atra a delante
str.trim() quita espacios del comienzo y final
str.split(separador) // parte la cadena y la devuelve en un array
str.replace(A,B // busca A en el string y lo reemplaza por B

crear objetos:
para crear un objeto primero se lo asigna a una variable. luego se lo encierra entre ,{} añadiendo adentro propiedades al estiolo propiedad:valor separado por comas

cargar nueva propiedad:
objeto.propiedadNueva="zzzz";
para modificarla simplemente es objeto.propiedad = propiedad_modificada;

para eliminar una propiedad se usa:
delete objeto.propiedad;

crear un método:
es igual a crear una propiedad solo que con funciones. queda asi:
propiedad: function(){}
para llamarlo es igual que para obtener una propiedad 

funciones:
funciones declaradas son las expresadas directamente en el codigo. la principal ventaja es que pueden ser llamadas incluso antes de ser defnidas.
funciones expresadas: son aquellas que se definen dentro de una variable ej: let suma = function(num,num2){}
console.log(suma(1,2));
funciones arrow: son mas simples pero no tienen this. ej let multiplicacion = (num,num2) => {num*num2}

callbacks: funciones que se ejecutan en otras. si la funcion secundaria necesita tener pasados parámetros la función primaria se los asigna dentro de su bloque de codigo. entonces la función secundaria no necesita parentesis ej:
respirar("aire",inhalar)// inhalar es una función que tiene parámetros de el gas que inhalara y la cantidad. ambos se los pasa la función inhalar

metodos de arrays:
slice(inicio,fin): corta el array a partir y hacia donde se indica.
splice(inicio,cant. elem. a elim.,"elemento1", elemento2..) combina el contenido de un array eliminando elementos existentes a partir del inicio o agregando nuevos elementos en su lugar 