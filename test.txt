SELECTORES: los hay de elementos como h1, h3 etc. tambien los hay de identidad que junto a la etiqueta del elemento se pone id ="" y en el documento css se pone un # y el nombre del elemento
SELECTORES:
- Elementos: h1, h3, etc.
- Identidad: id="" en HTML, #nombre en CSS.
- Clase: class="" en HTML, .nombre en CSS.
- Combinados: p.rojo selecciona párrafos con clase "rojo".
- Múltiples clases: class="rojo parrafo-principal".
- Múltiples elementos: p, h1 { color: red; }
- Universal: * aplica a todos los elementos.

JERARQUÍA:
- Se usa el primer estilo declarado.
- En HTML, se lee de arriba hacia abajo.
- Estilo en línea tiene prioridad sobre style y CSS externo.

COMENTARIOS:
- En CSS: /* texto */

BOX MODEL:
- Elementos HTML son cajas con: contenido, padding, borde y margen.
- Ancho total depende del elemento padre.
- Elementos inline ocupan el ancho necesario.
- Borde se aplica al contenido, a menos que haya padding.
- Padding crea espacio extra dentro del elemento.
- Borde rodea el padding.
- Padding: 4 valores (arriba, derecha, abajo, izquierda).
- Dimensiones totales: contenido + padding + borde.
- Margin crea espacio extra fuera del elemento.

FLEXBOX:
- Flexbox organiza elementos para diseños responsivos.
- display: block; para que <a> se comporte como bloque.
- display: flex; para crear un contenedor flex.
- Elementos hijos se organizan en una fila por defecto.
- flex-direction: column; para organizar verticalmente.
- flex-wrap: wrap; para permitir ajuste de elementos.
- flex-grow: permite que un elemento crezca.
- flex-shrink: permite que un elemento se encoja.

ATRIBUTOS COMUNES:
- font-size: 16px;
- line-break: normal;
- text-overflow: ellipsis;
- word-break: break-all;
- background-image: url('imagen.jpg');
- background-size: cover;
- background-repeat: no-repeat;
- background-position: center;
- border: 1px solid black;
- border-color: red;
- color: rgb(255, 0, 0);
- background-color: #ffffff;
- text-align: center;
- text-decoration-line: underline;
- text-decoration-color: blue;
- text-decoration-style: dashed;
- text-decoration-thickness: 2px;
- text-transform: uppercase;
- text-indent: 20px;
- letter-spacing: 1px;
- line-height: 1.5;
- word-spacing: 2px;
- white-space: nowrap;
- text-shadow: 2px 2px 5px gray;
- font-family: 'Serif', 'Sans-serif', 'Monospace', 'Cursive', 'Fantasy';
- font-style: italic;
- font-weight: bold;
- font-variant: small-caps;
- border-radius: 5px;
- box-shadow: 2px 2px 5px gray;
- opacity: 0.5;
- overflow: hidden;
- position: absolute;
- top: 10px;
- z-index: 10;
- display: flex;
- visibility: hidden;
- cursor: pointer;
- flex-direction: row;
- flex-wrap: wrap;
- justify-content: center;
- align-items: center;
- align-content: center;
- order: 1;
- flex-grow: 1;
- flex-shrink: 1;
- flex-basis: 100px;
- align-self: center;
los hay de clase que se pone class ="" y en el documento se hace referencia con . seguidon del nombre de la clase
tambien se pueden combinar selectores por ejemplo tenemos la clase rojo y varios parrafos p, si escribimos p.rojo seleccionamos los parrafos de la 
clase rojo y solo esos. ademas se le puede asignar mas de una clase a un elemento dejando un espacio ej: class ="rojo parrafo-principal"(ahora tiene las clases rojo y parradfo principal)
para aplicarle una misma propiedad a diferentes elementos se aniade una coma ejemplo p,h1{ color:red;}
el * es un selector universal que sirve para aplicar las propiedades a todos los elementos

JERARQUIA(si hay superposicion de estilos cuales se usan sobre otros):se toma el primer estamento delcarado. es decir lo primero que lea la maquina del codigo
dentro del documento html: se lee de arriba hacia abajo. si se declara un estilo dentro de un elemento(estilo en linea) se mantendra ese estilo por sobre el estilo
de la etiqueta style y sobre el documento css

COMENTARIOS: se comenta dentro de css asi: /* texto */

El Box Model es una forma de pensar acerca de cómo se muestran los elementos HTML en una página web. Cada elemento es considerado una caja con cuatro capas: contenido, padding, borde y margen.
El ancho total disponible para un elemento de nivel de bloque es dado por su padre.
Por defecto, los elementos inline, como imágenes y enlaces, tienen una capa de contenido que ocupa tanto ancho como sea necesario para mostrar el contenido. No hacen uso de todo el espacio disponible proporcionado por el elemento padre.
Por defecto, el borde se aplicará en los bordes del contenido de la caja, a menos que se haya agregado padding. La capa de padding se envuelve alrededor de la caja de contenido para crear espacio extra dentro del elemento y empujar el borde hacia afuera.
Border es la 3ra capa. Rodea el padding.
Puedes dar diferentes valores de padding a cada uno de los 4 lados. Agrega 4 valores, separados por espacios, en el orden: arriba, derecha, abajo, izquierda.
Para calcular las dimensiones totales de la caja, necesitas sumar las dimensiones de las 3 capas: contenido, relleno y borde.
Margin es la capa más exterior en el Modelo de Caja. Está envuelto alrededor de la capa de borde y crea un espacio extra fuera del elemento, entre el borde y los elementos adyacentes. El margin es transparente, asegura la separación y previene la superposición.

FLEXBOX: Los sitios web modernos están diseñados para verse bien en cualquier dispositivo, independientemente de las dimensiones de la pantalla. 
En esta lección, aprenderás a usar el Flexbox layout para organizar elementos HTML para diseños más responsivos.
La propiedad display puede anular los comportamientos predeterminados de los elementos en línea y de nivel de bloque. por ejemplo para que el elemento <a> se comporte como un elemento de bloque hay que poner display: block;
Flexbox se utiliza para organizar los elementos dentro de un contenedor automáticamente. Para crear un contenedor flex (flexible), establezca la propiedad de visualización en flex asi:display: flex;
Por defecto, los elementos hijo dentro de un contenedor padre flex se organizan automáticamente en 1 fila, intentando hacer el mejor uso del espacio disponible
Por defecto, los elementos hijos en un contenedor flex están organizados en una fila (horizontalmente). Establece la subpropiedad flex-direction a column(flex-direction:column;)para organizar los elementos verticalmente dentro de un contenedor flex.
Por defecto, los elementos hijos en un contenedor flex intentarán ajustarse en una sola línea. Puedes cambiar eso y permitir que los elementos se ajusten según sea necesario con la subpropiedad flex-wrap(flex-wrap:wrap;). Nuevamente, los elementos se organizarán automáticamente y el número de líneas dependerá del tamaño de la pantalla.
Por defecto, los elementos secundarios dentro de un contenedor flex se organizarán automáticamente. El espacio que ocupa cada elemento dependerá de su contenido. Por lo tanto, es posible que algunos elementos se muestren más grandes que otros si tienen más contenido.
Para tener más control sobre el espacio que los elementos ocupan dentro de un contenedor flex, puedes configurar la sub-propiedad flex-grow. 
La sub-propiedad flex-grow da a un elemento la capacidad de crecer para ocupar más espacio cuando este espacio está disponible en el contenedor (pantalla más grande). Acepta un valor sin unidad como una proporción.
El ejemplo muestra 3 elementos flex con proporciones relativas de 1, 2 y 3.
Los valores posibles para flex-grow son números enteros no negativos (0, 1, 2, 3, ...). Estos son valores sin unidad que sirven como proporciones para las dimensiones de los elementos.
flex-shrink hace lo opuesto de flex-grow. Se utiliza para adaptar tu diseño a pantallas más pequeñas. 
El valor determina cuánto se reducirá un elemento flexible en relación con el resto de los elementos cuando no hay suficiente espacio en el contenedor flexible. Un valor más alto significa que el elemento se reducirá más.













ATRIBUTOS UTILES/COMUNES:
ATRIBUTOS UTILES/COMUNES:
font-size: establece el tamaño de la fuente. Unidad: px, em, rem, %. Ejemplo: font-size: 16px;
line-break: controla el comportamiento de los saltos de línea. Valores: auto, loose, normal, strict. Ejemplo: line-break: normal;
text-overflow: controla cómo se muestra el texto desbordado. Valores: clip, ellipsis. Ejemplo: text-overflow: ellipsis;
word-break: controla el comportamiento de las palabras desbordadas. Valores: normal, break-all, keep-all. Ejemplo: word-break: break-all;
background-image: establece una imagen de fondo. Ejemplo: background-image: url('imagen.jpg');
background-size: establece el tamaño de la imagen de fondo. Valores: auto, cover, contain. Ejemplo: background-size: cover;
background-repeat: establece cómo se repite la imagen de fondo. Valores: repeat, no-repeat, repeat-x, repeat-y. Ejemplo: background-repeat: no-repeat;
background-position: establece la posición de la imagen de fondo. Ejemplo: background-position: center;
border: establece el borde de un elemento. Ejemplo: border: 1px solid black;
border-color: establece el color del borde. Ejemplo: border-color: red;
color: cambia el color de los textos. usar rgb para más precisión. Ejemplo: color: rgb(255, 0, 0);
background-color: cambia el color de fondo. BUENA PRÁCTICA: usar un div para controlar las dimensiones del fondo y no se descontrolen. Ejemplo: background-color: #ffffff;
text-align: establece la posición del texto. Valores: left, center, right, end, start, justify. Ejemplo: text-align: center;
text-decoration-line: establece las líneas que subrayan el texto. Valores: overline, line-through, underline, none. Ejemplo: text-decoration-line: underline;
text-decoration-color: establece el color del subrayado. Ejemplo: text-decoration-color: blue;
text-decoration-style: establece el estilo del subrayado. Valores: dotted, wavy, solid, dashed, double. Ejemplo: text-decoration-style: dashed;
text-decoration-thickness: establece el ancho en píxeles. Ejemplo: text-decoration-thickness: 2px;
text-transform: modifica mayúsculas o minúsculas del texto. Valores: uppercase, lowercase, capitalize, none. Ejemplo: text-transform: uppercase;
text-indent: crea una sangría. Unidad: px. Ejemplo: text-indent: 20px;
letter-spacing: separación de letras en px. Ejemplo: letter-spacing: 1px;
line-height: define la altura de la línea en porcentaje o factor. Ejemplo: line-height: 1.5;
word-spacing: espaciado de palabras en px. Ejemplo: word-spacing: 2px;
white-space: controla el manejo de espacios en blanco. Valores: nowrap, pre, pre-line, pre-wrap, normal. Ejemplo: white-space: nowrap;
text-shadow: establece la posición de la sombra. Formato: (X Y desenfoque en px color). Ejemplo: text-shadow: 2px 2px 5px gray;
font-family: Existen varias familias de fuentes. Las cinco más conocidas son Serif, Sans-serif, Monospace, Cursive, Fantasy. Al elegir una fuente se pone la preferida y otras opcionales de la misma familia en el caso de que no exista. 
font-style: se puede poner normal, itálica u oblicua(oblique). Ejemplo: font-style: italic;
font-weight: grosor en multiplos de 100 o bold, bolder, lighter
font-variant:crea estilos nuevos de fuentes Ej:small-caps:todo va en mayusculas la primera letra es mas grande que las otras emulando la letra capital
border-radius: redondea las esquinas de un elemento. Ejemplo: border-radius: 5px;
box-shadow: agrega sombra a un elemento. Ejemplo: box-shadow: 2px 2px 5px gray;
opacity: establece la opacidad de un elemento. Valores: 0 (transparente) a 1 (opaco). Ejemplo: opacity: 0.5;
overflow: controla el contenido desbordado. Valores: visible, hidden, scroll, auto. Ejemplo: overflow: hidden;
position: establece la posición de un elemento. Valores: static, relative, absolute, fixed, sticky. Ejemplo: position: absolute;
top, right, bottom, left: establece la posición de un elemento posicionado. Ejemplo: top: 10px;
z-index: establece el orden de apilamiento de un elemento posicionado. Ejemplo: z-index: 10;
display: establece el tipo de caja de un elemento. Valores: none, block, inline, inline-block, flex, grid. Ejemplo: display: flex;
visibility: establece la visibilidad de un elemento. Valores: visible, hidden, collapse. Ejemplo: visibility: hidden;
cursor: cambia el cursor del ratón cuando se pasa sobre un elemento. Ejemplo: cursor: pointer;
flex-direction: establece la dirección de los elementos flexibles. Valores: row, row-reverse, column, column-reverse. Ejemplo: flex-direction: row;
flex-wrap: controla si los elementos flexibles se envuelven. Valores: nowrap, wrap, wrap-reverse. Ejemplo: flex-wrap: wrap;
justify-content: alinea los elementos flexibles a lo largo del eje principal. Valores: flex-start, flex-end, center, space-between, space-around, space-evenly. Ejemplo: justify-content: center;
align-items: alinea los elementos flexibles a lo largo del eje transversal. Valores: flex-start, flex-end, center, baseline, stretch. Ejemplo: align-items: center;
align-content: alinea las líneas flexibles cuando hay espacio extra en el eje transversal. Valores: flex-start, flex-end, center, space-between, space-around, stretch. Ejemplo: align-content: center;
order: establece el orden de los elementos flexibles. Valores: enteros. Ejemplo: order: 1;
flex-grow: permite que un elemento flexible crezca en relación con los demás. Valores: enteros. Ejemplo: flex-grow: 1;
flex-shrink: permite que un elemento flexible se encoja en relación con los demás. Valores: enteros. Ejemplo: flex-shrink: 1;
flex-basis: establece la base flexible inicial de un elemento. Valores: auto, px, %. Ejemplo: flex-basis: 100px;
align-self: alinea un elemento flexible a lo largo del eje transversal, sobrescribiendo align-items. Valores: auto, flex-start, flex-end, center, baseline, stretch. Ejemplo: align-self: center;
grid-template-columns: define el número y tamaño de las columnas en un grid layout. Ejemplo: grid-template-columns: 1fr 2fr;
grid-template-rows: define el número y tamaño de las filas en un grid layout. Ejemplo: grid-template-rows: 100px 200px;
grid-column-gap: establece el espacio entre columnas en un grid layout. Ejemplo: grid-column-gap: 10px;
grid-row-gap: establece el espacio entre filas en un grid layout. Ejemplo: grid-row-gap: 10px;
grid-area: define un área dentro de un grid layout. Ejemplo: grid-area: header;
grid-template-areas: define las áreas dentro de un grid layout. Ejemplo: grid-template-areas: "header header" "main sidebar";
grid-column: define el inicio y fin de una columna en un grid layout. Ejemplo: grid-column: 1 / 3;
grid-row: define el inicio y fin de una fila en un grid layout. Ejemplo: grid-row: 1 / 2;
grid-auto-flow: controla el flujo automático de los elementos en un grid layout. Ejemplo: grid-auto-flow: row;
grid-auto-columns: establece el tamaño de las columnas generadas automáticamente en un grid layout. Ejemplo: grid-auto-columns: 100px;
grid-auto-rows: establece el tamaño de las filas generadas automáticamente en un grid layout. Ejemplo: grid-auto-rows: 100px;
font-size: establece el tamaño de la fuente. Unidad: px, em, rem, %. Ejemplo: font-size: 16px;
line-break: controla el comportamiento de los saltos de línea. Valores: auto, loose, normal, strict. Ejemplo: line-break: normal;
text-overflow: controla cómo se muestra el texto desbordado. Valores: clip, ellipsis. Ejemplo: text-overflow: ellipsis;
word-break: controla el comportamiento de las palabras desbordadas. Valores: normal, break-all, keep-all. Ejemplo: word-break: break-all;
background-image: establece una imagen de fondo. Ejemplo: background-image: url('imagen.jpg');
background-size: establece el tamaño de la imagen de fondo. Valores: auto, cover, contain. Ejemplo: background-size: cover;
background-repeat: establece cómo se repite la imagen de fondo. Valores: repeat, no-repeat, repeat-x, repeat-y. Ejemplo: background-repeat: no-repeat;
background-position: establece la posición de la imagen de fondo. Ejemplo: background-position: center;
border: establece el borde de un elemento. Ejemplo: border: 1px solid black;
border-color: establece el color del borde. Ejemplo: border-color: red;
color: cambia el color de los textos. usar rgb para más precisión. Ejemplo: color: rgb(255, 0, 0);
background-color: cambia el color de fondo. BUENA PRÁCTICA: usar un div para controlar las dimensiones del fondo y no se descontrolen. Ejemplo: background-color: #ffffff;
text-align: establece la posición del texto. Valores: left, center, right, end, start, justify. Ejemplo: text-align: center;
ATRIBUTOS UTILES/COMUNES:
font-size: establece el tamaño de la fuente. Unidad: px, em, rem, %. Ejemplo: font-size: 16px;
line-break: controla el comportamiento de los saltos de línea. Valores: auto, loose, normal, strict. Ejemplo: line-break: normal;
text-overflow: controla cómo se muestra el texto desbordado. Valores: clip, ellipsis. Ejemplo: text-overflow: ellipsis;
word-break: controla el comportamiento de las palabras desbordadas. Valores: normal, break-all, keep-all. Ejemplo: word-break: break-all;
background-image: establece una imagen de fondo. Ejemplo: background-image: url('imagen.jpg');
background-size: establece el tamaño de la imagen de fondo. Valores: auto, cover, contain. Ejemplo: background-size: cover;
background-repeat: establece cómo se repite la imagen de fondo. Valores: repeat, no-repeat, repeat-x, repeat-y. Ejemplo: background-repeat: no-repeat;
background-position: establece la posición de la imagen de fondo. Ejemplo: background-position: center;
border: establece el borde de un elemento. Ejemplo: border: 1px solid black;
border-color: establece el color del borde. Ejemplo: border-color: red;
color: cambia el color de los textos. usar rgb para más precisión. Ejemplo: color: rgb(255, 0, 0);
background-color: cambia el color de fondo. BUENA PRÁCTICA: usar un div para controlar las dimensiones del fondo y no se descontrolen. Ejemplo: background-color: #ffffff;
text-align: establece la posición del texto. Valores: left, center, right, end, start, justify. Ejemplo: text-align: center;
text-decoration-line: establece las líneas que subrayan el texto. Valores: overline, line-through, underline, none. Ejemplo: text-decoration-line: underline;
text-decoration-color: establece el color del subrayado. Ejemplo: text-decoration-color: blue;
text-decoration-style: establece el estilo del subrayado. Valores: dotted, wavy, solid, dashed, double. Ejemplo: text-decoration-style: dashed;
text-decoration-thickness: establece el ancho en píxeles. Ejemplo: text-decoration-thickness: 2px;
text-transform: modifica mayúsculas o minúsculas del texto. Valores: uppercase, lowercase, capitalize, none. Ejemplo: text-transform: uppercase;
text-indent: crea una sangría. Unidad: px. Ejemplo: text-indent: 20px;
letter-spacing: separación de letras en px. Ejemplo: letter-spacing: 1px;
line-height: define la altura de la línea en porcentaje o factor. Ejemplo: line-height: 1.5;
word-spacing: espaciado de palabras en px. Ejemplo: word-spacing: 2px;
white-space: controla el manejo de espacios en blanco. Valores: nowrap, pre, pre-line, pre-wrap, normal. Ejemplo: white-space: nowrap;
text-shadow: establece la posición de la sombra. Formato: (X Y desenfoque en px color). Ejemplo: text-shadow: 2px 2px 5px gray;
font-family: Existen varias familias de fuentes. Las cinco más conocidas son Serif, Sans-serif, Monospace, Cursive, Fantasy. Al elegir una fuente se pone la preferida y otras opcionales de la misma familia en el caso de que no exista. 
font-style: se puede poner normal, itálica u oblicua(oblique). Ejemplo: font-style: italic;
font-weight: grosor en multiplos de 100 o bold, bolder, lighter
font-variant:crea estilos nuevos de fuentes Ej:small-caps:todo va en mayusculas la primera letra es mas grande que las otras emulando la letra capital
border-radius: redondea las esquinas de un elemento. Ejemplo: border-radius: 5px;
box-shadow: agrega sombra a un elemento. Ejemplo: box-shadow: 2px 2px 5px gray;
opacity: establece la opacidad de un elemento. Valores: 0 (transparente) a 1 (opaco). Ejemplo: opacity: 0.5;
overflow: controla el contenido desbordado. Valores: visible, hidden, scroll, auto. Ejemplo: overflow: hidden;
position: establece la posición de un elemento. Valores: static, relative, absolute, fixed, sticky. Ejemplo: position: absolute;
top, right, bottom, left: establece la posición de un elemento posicionado. Ejemplo: top: 10px;
z-index: establece el orden de apilamiento de un elemento posicionado. Ejemplo: z-index: 10;
display: establece el tipo de caja de un elemento. Valores: none, block, inline, inline-block, flex, grid. Ejemplo: display: flex;
visibility: establece la visibilidad de un elemento. Valores: visible, hidden, collapse. Ejemplo: visibility: hidden;
cursor: cambia el cursor del ratón cuando se pasa sobre un elemento. Ejemplo: cursor: pointer;
flex-direction: establece la dirección de los elementos flexibles. Valores: row, row-reverse, column, column-reverse. Ejemplo: flex-direction: row;
flex-wrap: controla si los elementos flexibles se envuelven. Valores: nowrap, wrap, wrap-reverse. Ejemplo: flex-wrap: wrap;
justify-content: alinea los elementos flexibles a lo largo del eje principal. Valores: flex-start, flex-end, center, space-between, space-around, space-evenly. Ejemplo: justify-content: center;
align-items: alinea los elementos flexibles a lo largo del eje transversal. Valores: flex-start, flex-end, center, baseline, stretch. Ejemplo: align-items: center;
align-content: alinea las líneas flexibles cuando hay espacio extra en el eje transversal. Valores: flex-start, flex-end, center, space-between, space-around, stretch. Ejemplo: align-content: center;
order: establece el orden de los elementos flexibles. Valores: enteros. Ejemplo: order: 1;
flex-grow: permite que un elemento flexible crezca en relación con los demás. Valores: enteros. Ejemplo: flex-grow: 1;
flex-shrink: permite que un elemento flexible se encoja en relación con los demás. Valores: enteros. Ejemplo: flex-shrink: 1;
flex-basis: establece la base flexible inicial de un elemento. Valores: auto, px, %. Ejemplo: flex-basis: 100px;
align-self: alinea un elemento flexible a lo largo del eje transversal, sobrescribiendo align-items. Valores: auto, flex-start, flex-end, center, baseline, stretch. Ejemplo: align-self: center;
grid-template-columns: define el número y tamaño de las columnas en un grid layout. Ejemplo: grid-template-columns: 1fr 2fr;
grid-template-rows: define el número y tamaño de las filas en un grid layout. Ejemplo: grid-template-rows: 100px 200px;
grid-column-gap: establece el espacio entre columnas en un grid layout. Ejemplo: grid-column-gap: 10px;
grid-row-gap: establece el espacio entre filas en un grid layout. Ejemplo: grid-row-gap: 10px;
grid-area: define un área dentro de un grid layout. Ejemplo: grid-area: header;
grid-template-areas: define las áreas dentro de un grid layout. Ejemplo: grid-template-areas: "header header" "main sidebar";
grid-column: define el inicio y fin de una columna en un grid layout. Ejemplo: grid-column: 1 / 3;
grid-row: define el inicio y fin de una fila en un grid layout. Ejemplo: grid-row: 1 / 2;
grid-auto-flow: controla el flujo automático de los elementos en un grid layout. Ejemplo: grid-auto-flow: row;
grid-auto-columns: establece el tamaño de las columnas generadas automáticamente en un grid layout. Ejemplo: grid-auto-columns: 100px;
grid-auto-rows: establece el tamaño de las filas generadas automáticamente en un grid layout. Ejemplo: grid-auto-rows: 100px;
text-decoration-line: establece las líneas que subrayan el texto. Valores: overline, line-through, underline, none. Ejemplo: text-decoration-line: underline;
text-decoration-color: establece el color del subrayado. Ejemplo: text-decoration-color: blue;
text-decoration-style: establece el estilo del subrayado. Valores: dotted, wavy, solid, dashed, double. Ejemplo: text-decoration-style: dashed;
text-decoration-thickness: establece el ancho en píxeles. Ejemplo: text-decoration-thickness: 2px;
text-transform: modifica mayúsculas o minúsculas del texto. Valores: uppercase, lowercase, capitalize, none. Ejemplo: text-transform: uppercase;
text-indent: crea una sangría. Unidad: px. Ejemplo: text-indent: 20px;
letter-spacing: separación de letras en px. Ejemplo: letter-spacing: 1px;
line-height: define la altura de la línea en porcentaje o factor. Ejemplo: line-height: 1.5;
word-spacing: espaciado de palabras en px. Ejemplo: word-spacing: 2px;
white-space: controla el manejo de espacios en blanco. Valores: nowrap, pre, pre-line, pre-wrap, normal. Ejemplo: white-space: nowrap;
text-shadow: establece la posición de la sombra. Formato: (X Y desenfoque en px color). Ejemplo: text-shadow: 2px 2px 5px gray;
font-family: Existen varias familias de fuentes. Las cinco más conocidas son Serif, Sans-serif, Monospace, Cursive, Fantasy. Al elegir una fuente se pone la preferida y otras opcionales de la misma familia en el caso de que no exista. 
font-style: se puede poner normal, itálica u oblicua(oblique). Ejemplo: font-style: italic;
font-weight: grosor en multiplos de 100 o bold, bolder, lighter
font-variant:crea estilos nuevos de fuentes Ej:small-caps:todo va en mayusculas la primera letra es mas grande que las otras emulando la letra capital
border-radius: redondea las esquinas de un elemento. Ejemplo: border-radius: 5px;
box-shadow: agrega sombra a un elemento. Ejemplo: box-shadow: 2px 2px 5px gray;
opacity: establece la opacidad de un elemento. Valores: 0 (transparente) a 1 (opaco). Ejemplo: opacity: 0.5;
overflow: controla el contenido desbordado. Valores: visible, hidden, scroll, auto. Ejemplo: overflow: hidden;
position: establece la posición de un elemento. Valores: static, relative, absolute, fixed, sticky. Ejemplo: position: absolute;
top, right, bottom, left: establece la posición de un elemento posicionado. Ejemplo: top: 10px;
z-index: establece el orden de apilamiento de un elemento posicionado. Ejemplo: z-index: 10;
display: establece el tipo de caja de un elemento. Valores: none, block, inline, inline-block, flex, grid. Ejemplo: display: flex;
visibility: establece la visibilidad de un elemento. Valores: visible, hidden, collapse. Ejemplo: visibility: hidden;
cursor: cambia el cursor del ratón cuando se pasa sobre un elemento. Ejemplo: cursor: pointer;
flex-direction: establece la dirección de los elementos flexibles. Valores: row, row-reverse, column, column-reverse. Ejemplo: flex-direction: row;
flex-wrap: controla si los elementos flexibles se envuelven. Valores: nowrap, wrap, wrap-reverse. Ejemplo: flex-wrap: wrap;
justify-content: alinea los elementos flexibles a lo largo del eje principal. Valores: flex-start, flex-end, center, space-between, space-around, space-evenly. Ejemplo: justify-content: center;
align-items: alinea los elementos flexibles a lo largo del eje transversal. Valores: flex-start, flex-end, center, baseline, stretch. Ejemplo: align-items: center;
align-content: alinea las líneas flexibles cuando hay espacio extra en el eje transversal. Valores: flex-start, flex-end, center, space-between, space-around, stretch. Ejemplo: align-content: center;
order: establece el orden de los elementos flexibles. Valores: enteros. Ejemplo: order: 1;
flex-grow: permite que un elemento flexible crezca en relación con los demás. Valores: enteros. Ejemplo: flex-grow: 1;
flex-shrink: permite que un elemento flexible se encoja en relación con los demás. Valores: enteros. Ejemplo: flex-shrink: 1;
flex-basis: establece la base flexible inicial de un elemento. Valores: auto, px, %. Ejemplo: flex-basis: 100px;
align-self: alinea un elemento flexible a lo largo del eje transversal, sobrescribiendo align-items. Valores: auto, flex-start, flex-end, center, baseline, stretch. Ejemplo: align-self: center;


SELECTORES:
- Elementos: h1, h3, etc.
- Identidad: id="" en HTML, #nombre en CSS.
- Clase: class="" en HTML, .nombre en CSS.
- Combinados: p.rojo selecciona párrafos con clase "rojo".
- Múltiples clases: class="rojo parrafo-principal".
- Múltiples elementos: p, h1 { color: red; }
- Universal: * aplica a todos los elementos.

JERARQUÍA:
- Se usa el primer estilo declarado.
- En HTML, se lee de arriba hacia abajo.
- Estilo en línea tiene prioridad sobre style y CSS externo.

COMENTARIOS:
- En CSS: /* texto */

BOX MODEL:
- Elementos HTML son cajas con: contenido, padding, borde y margen.
- Ancho total depende del elemento padre.
- Elementos inline ocupan el ancho necesario.
- Borde se aplica al contenido, a menos que haya padding.
- Padding crea espacio extra dentro del elemento.
- Borde rodea el padding.
- Padding: 4 valores (arriba, derecha, abajo, izquierda).
- Dimensiones totales: contenido + padding + borde.
- Margin crea espacio extra fuera del elemento.

FLEXBOX:
- Flexbox organiza elementos para diseños responsivos.
- display: block; para que <a> se comporte como bloque.
- display: flex; para crear un contenedor flex.
- Elementos hijos se organizan en una fila por defecto.
- flex-direction: column; para organizar verticalmente.
- flex-wrap: wrap; para permitir ajuste de elementos.
- flex-grow: permite que un elemento crezca.
- flex-shrink: permite que un elemento se encoja.

ATRIBUTOS COMUNES:
- display: flex;
- position: absolute;
- top: 10px;
- z-index: 10;
- color: rgb(255, 0, 0);
- background-color: #ffffff;
- font-size: 16px;
- text-align: center;
- text-decoration-line: underline;
- text-decoration-color: blue;
- text-decoration-style: dashed;
- text-decoration-thickness: 2px;
- text-transform: uppercase;
- text-indent: 20px;
- letter-spacing: 1px;
- line-height: 1.5;
- word-spacing: 2px;
- white-space: nowrap;
- text-shadow: 2px 2px 5px gray;
- font-family: 'Serif', 'Sans-serif', 'Monospace', 'Cursive', 'Fantasy';
- font-style: italic;
- font-weight: bold;
- font-variant: small-caps;
- border: 1px solid black;
- border-color: red;
- border-radius: 5px;
- box-shadow: 2px 2px 5px gray;
- opacity: 0.5;
- overflow: hidden;
- visibility: hidden;
- cursor: pointer;
- flex-direction: row;
- flex-wrap: wrap;
- justify-content: center;
- align-items: center;
- align-content: center;
- order: 1;
- flex-grow: 1;
- flex-shrink: 1;
- flex-basis: 100px;
- align-self: center;
- background-image: url('imagen.jpg');
- background-size: cover;
- background-repeat: no-repeat;
- background-position: center;
- line-break: normal;
- text-overflow: ellipsis;
- word-break: break-all;
- grid-template-columns: 1fr 2fr;
- grid-template-rows: 100px 200px;
- grid-column-gap: 10px;
- grid-row-gap: 10px;
- grid-area: header;
- grid-template-areas: "header header" "main sidebar";
- grid-column: 1 / 3;
- grid-row: 1 / 2;
- grid-auto-flow: row;
- grid-auto-columns: 100px;
- grid-auto-rows: 100px;
<h1>The datalist element</h1>

<form action="/action_page.php" method="get">
  <label for="browser">Choose your browser from the list:</label>
  <input list="browsers" name="browser" id="browser">
  <datalist id="browsers">
    <option value="Edge">
    <option value="Firefox">
    <option value="Chrome">
    <option value="Opera">
    <option value="Safari">
  </datalist>
  <input type="submit">
</form>

<p><strong>Note:</strong> The datalist tag is not supported in Safari 12.0 (or earlier).</p>

</body>
</html>
