para subir paginas web netify

SELECTORES: los hay de elementos como h1, h3 etc. tambien los hay de identidad que junto a la etiqueta del elemento se pone id ="" y en el documento css se pone un # y el nombre del elemento
SELECTORES:
- Elementos: h1, h3, etc.
- Identidad: id="" en HTML, #nombre en CSS.
- Clase: class="" en HTML, .nombre en CSS.
- Combinados: p.rojo selecciona párrafos con clase "rojo".
- Múltiples clases: class="rojo parrafo-principal".
- Múltiples elementos: p, h1 { color: red; }
- Universal: * aplica a todos los elementos.

JERARQUÍA:
- Se usa el primer estilo declarado.
- En HTML, se lee de arriba hacia abajo.
- Estilo en línea tiene prioridad sobre style y CSS externo.

COMENTARIOS:
- En CSS: /* texto */

BOX MODEL:
- Elementos HTML son cajas con: contenido, padding, borde y margen.
- Ancho total depende del elemento padre.
- Elementos inline ocupan el ancho necesario.
- Borde se aplica al contenido, a menos que haya padding.
- Padding crea espacio extra dentro del elemento.
- Borde rodea el padding.
- Padding: 4 valores (arriba, derecha, abajo, izquierda).
- Dimensiones totales: contenido + padding + borde.
- Margin crea espacio extra fuera del elemento.

FLEXBOX:
- Flexbox organiza elementos para diseños responsivos. por defecto ajusta el tamaño de los elementos al tamaño del contenedor
- display: block; para que <a> se comporte como bloque.
- display: flex; para crear un contenedor flex.
- Elementos hijos se organizan en una fila por defecto.
- flex-direction: define el eje principal (row, column, row-reverse, column-reverse). el cross axis sera perpendicular
- flex-wrap: wrap; para permitir a los elementos envolverse en varias líneas.S
- flex-grow: permite que un elemento crezca. usando el espacio libre compartido con otros elementos, 1= 100% de espacio disponible
- flex-shrink: permite que un elemento se encoja. en factor de 1 
-justify-content: alinea elementos en el eje principal (flex-start, flex-end, center, space-between, space-around).
-align-items:funciona con no wrap. alinea elementos en el eje transversal (flex-start, flex-end, center, baseline, stretch).
align-content:funciona con wrap. alinea en el cross axis cuando los contenedores incluyen varias lineas este evita dejar espacios vacios (flex-start, flex-end, center, baseline, stretch).
-order: en indice. valor positivo: va al final de la caja, valor negativo:va al principio
-align-self:alinea el item ignorando alineamientos del padre (flex-start, flex-end, center, space-between, space-around)
GRID (Diseño en dos dimensiones)
display: grid; activa el modo grid en el contenedor.

grid-template-columns: define columnas → grid-template-columns: 1fr 2fr 1fr;.

grid-template-rows: define filas → grid-template-rows: auto 100px 1fr;.

grid-template-areas: define zonas nombradas → se usa junto con grid-area.

grid-area: asigna un ítem a una zona → grid-area: header;.

grid-column: define posición horizontal → grid-column: 1 / span 2;.

grid-row: define posición vertical → grid-row: 2 / 4;.

gap: define espacio entre filas y columnas → gap: 10px 20px; (fila, columna).

grid: shorthand → grid: auto-flow / 1fr 2fr; (flujo automático + columnas).

place-items: alinea horizontal y verticalmente → place-items: center;.

justify-items: alinea horizontalmente cada ítem → justify-items: start;.

align-items: alinea verticalmente cada ítem → align-items: stretch;.

FUENTES DE TERCEROS: se copia el link y se lo pone dentro del head en HTML con la etiqueta link. Ejemplo:
<link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap" rel="stylesheet">
Luego, se puede usar la fuente en CSS con la propiedad font-family. Ejemplo:
body {
  font-family: 'Roboto', sans-serif;
}

CSS Cheat Sheet: Notas de Referencia

Este documento reúne atributos útiles de CSS organizados en cuatro grandes secciones. Cada apartado incluye uso, sintaxis, unidades y ejemplos de aplicación común. ¡Modifícalo a tu gusto!

---

1. Modelo de Caja (Box Model)

Ancho y Alto (width, height)

- Uso: define el tamaño interno del contenido de una caja.  
- Sintaxis:
  `css
  width: 200px;
  height: 150px;
  `
- Unidades: px, %, em, vw, vh.  
- Uso común: ajustar bloques, imágenes o contenedores en diseños fijos o responsivos.

-- max-width: establece el ancho maximo ademas si se reduce la pantalla se achica tambien
   uso: se puefe usar para adaptar la web a moviles de diferentes tamaños, ya que se redimensiona en tiempo real
Margen (margin)

- Uso: espacio externo que separa la caja de otros elementos.  
- Sintaxis:
  `css
  margin: 20px;
  margin: 10px 15px 5px 0; / top right bottom left /
  `
- Unidades: px, %, auto.  
- Uso común: centrar bloques (margin: auto), separar secciones.

Relleno (padding)

- Uso: espacio interno entre el contenido y el borde de la caja.  
- Sintaxis:
  `css
  padding: 10px;
  padding: 5px 10px; / vertical horizontal /
  `
- Unidades: px, %.  
- Uso común: mejorar legibilidad dentro de botones, tarjetas o inputs.

Bordes (border)

- Uso: línea que rodea el elemento.  
- Sintaxis:
  `css
  border: 2px dotted #333;
  border-top: 1px solid red;
  `
- Estilos: dotted, dashed, solid, double, none.  
- Unidades y colores: px, rgb(), hex, nombres.  
- Uso común: resaltar cajas, dividir secciones visualmente.

Contorno (outline)

- Uso: línea exterior que no afecta el flujo del layout.  
- Sintaxis:
  `css
  outline: 2px dashed blue;
  outline-offset: 5px;
  `
- Propiedad extra: outline-offset separa el contorno de la caja.  
- Uso común: resaltar inputs en foco (:focus), mejorar accesibilidad.

Box-sizing: content-box, border box: calcula el tamaño de la caja solo el contenido o tambien incluido el padding

---

2. Estilos de Texto

Color de Texto (color)

- Uso: cambiar el color del texto.  
- Sintaxis:
  `css
  color: #ff6600;
  color: rgb(255, 102, 0);
  `
- Formatos: hex, rgb(), colores nombrados.  
- Uso común: resaltar títulos, botones o mensajes de alerta.

Alineación (text-align)

- Uso: controla la alineación horizontal del texto.  
- Sintaxis:
  `css
  text-align: center;
  text-align: justify;
  `
- Valores: left, right, center, justify.  
- Uso común: centrar encabezados, justificar párrafos largos.

Decoración de Texto (text-decoration)

- Uso: agregar o quitar líneas (subrayado, tachado).  
- Sintaxis:
  `css
  text-decoration: underline;
  text-decoration: line-through;
  `
- Valores: none, underline, overline, line-through.  
- Uso común: estilizar enlaces, indicar errores.

Transformación de Texto (text-transform)

- Uso: convertir mayúsculas/minúsculas.  
- Sintaxis:
  `css
  text-transform: uppercase;
  text-transform: capitalize;
  `
- Valores: uppercase, lowercase, capitalize, none.  
- Uso común: normalizar títulos y botones.

Espaciado de Texto

- letter-spacing (entre letras):
  `css
  letter-spacing: 2px;
  `
- word-spacing (entre palabras):
  `css
  word-spacing: 5px;
  `
- line-height (entre líneas):
  `css
  line-height: 1.5;
  `
- Unidades: px, em, unitless para line-height.  
- Uso común: mejorar legibilidad en párrafos y títulos ajustados.

Sombra de Texto (text-shadow)

- Uso: añadir sombra para dar profundidad.  
- Sintaxis:
  `css
  text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);
  `
- Valores: desplazamiento X, desplazamiento Y, desenfoque, color.  
- Uso común: destacar títulos, mejorar contraste sobre fondos.

Fuentes

- Uso: definir familia, tamaño, peso y estilo de texto.  
- Sintaxis:
  `css
  font-family: 'Arial', sans-serif;
  font-size: 18px;
  font-weight: bold;
  font-style: italic;
  `
- Unidades: px, em, rem.  
- Uso común: ajustar diseño tipográfico según identidad visual.

Fuentes de Terceros (Google Fonts)

- Procedimiento:
  1. Insertar en <head>:
     `html
     <link href="https://fonts.googleapis.com/css2?family=Roboto&display=swap" rel="stylesheet">
     `
  2. Aplicar en CSS:
     `css
     font-family: 'Roboto', sans-serif;
     `
- Uso común: dar personalidad al sitio sin instalar fuentes localmente.  
- Observación: requiere conexión para cargar la fuente externa.

Listas

- list-style-type: disc, circle, square, decimal.  
- list-style-position: inside, outside.  
- list-style-image: url personalizada:
  `css
  list-style-image: url('checkmark.png');
  `
- Uso común: menús, pasos de proceso, listados estilizados.

---

3. Posicionamiento y Diseño Responsive

Display

- Uso: define el tipo de caja y comportamiento de renderizado.  
- Sintaxis:
  `css
  display: block;
  display: inline-block te permite hacer elementos en linea pero que se pueda modificar ancho y alto;
  display: flex;
  display: grid;
  display: none;
  `
- Uso común: estructurar layouts, ocultar elementos, aplicar flexbox o grid.

Max-Width

- Uso: ancho máximo que puede ocupar un elemento.  
- Sintaxis:
  `css
  max-width: 800px;
  `
- Unidades: px, %, vw.  
- Uso común: evitar desbordes en pantallas grandes; base de diseños responsivos.

display: none vs visibility: hidden

Propiedad  Oculta el elemento  Ocupa espacio en layout
display: none  Sí  No
visibility: hidden  Sí  Sí

- Uso común:
  - display: none para remover del flujo.
  - visibility: hidden para ocultar sin romper el layout.

Position

- Uso: controla el método de posicionamiento de un elemento.  
- Sintaxis:
  `css
  position: relative(similar al fixed excepto que se guarda el espqcio del item en el flujo de informqcion;
  position: absolute(deja el item "clavado" en un lugar;
  position: fixed(deja al item clavado en un lugar y ademas si sw hace scroll lo sigue;
  position: sticky(una vez que se hace scroll y el item esta por irse de la visra del usuario, este se pone en un mismo lugar;
  luego se usa top: 20px; left: 10px; etc para poder modificar la posicion
  `
- Valores:
  - static (por defecto), relative, absolute, fixed, sticky.  
- Uso común: menús flotantes, headers fijos, elementos anclados al scroll.

Z-Index

- Uso: controla el orden de apilamiento en el eje Z. se usa con cualquier position que no sea static.  
- Sintaxis:
  `css
  z-index: 10;
  `
- Uso común: asegurar que modales, dropdowns o tooltips aparezcan encima.

Overflow

- Uso: maneja contenido que excede el área de caja.  
- Sintaxis:
  `css
  overflow: visible;
  overflow: hidden oculta el contenido que excede el area
  overflow: scroll crea scrolls, X e Y
  overflow-x: auto igual que scroll pero decide automaricamenre si poner un eje o no
  `
- overflow-wrap: corta las palabras si se exede el area.
- Uso común: activar scroll, ocultar desbordes no deseados.
Float

- Uso: cambia el comportamiento de cosas flotantes anidadas dentro de un P
- Sintaxis: float: left, right
Display Inline-Block

- Uso: combina características inline y block.  
- Sintaxis:
  `css
  display: inline-block;
  `
- Uso común: menús horizontales, galerías de cards, botones alineados.

Alineación de Elementos

-Centrar un div: margin: auto; se va solo al centro
--float:right,left; alinea a la izquierda o derecha

- Texto: text-align: center;  
- Flexbox:
  `css
  justify-content: center;
  align-items: center;
  `
- Inline / Inline-block: vertical-align: middle;  
- Grid:
  `css
  place-items: center;
  `
- Uso común: centrar contenido tanto horizontal como verticalmente.

---

4. CSS Avanzado

Combinadores de Selección

- Descendiente(espacio): div p { … } aplica una propiedad a todos los descendientes, hijos nietos
- Hijo directo: ul > li { … }  aplica una propiedad solo al hijo 
- Hermano adyacente: h1 + p { … }  aplica una propiedad solo al primer hermano entre el elemento declarado ( en jerarquia)
- Hermanos generales: nav ~ a { … } aplica a todos los hermanos del elemento(en jerarquia) 
- Uso común: aplicar estilos basados en jerarquía y relaciones de HTML.

Pseudoclases

-llama como a funciones especificas de cada elemento
- Ejemplos:  
  `css
  a:hover { color: red; }
  li:nth-child(even) { background: #eee; }
  input:focus { border-color: blue; }
  `
- Uso común: estados de interacción, selección de elementos por posición.

Pseudoelementos

-permite seleccionar una parte de un elemento
- Sintaxis: selector::pseudoelemento  
  `css
  p::first-letter { font-size: 2em; }
  div::before { content: '★'; }
  `
- Uso común: insertar contenido decorativo, estilizar partes específicas.

Opacidad (opacity)

- Uso: controla la transparencia del elemento.  
- Sintaxis: opacity:0-1;
  `css
  opacity: 0.5;
  `
- Uso común: efectos suaves en hover, fondos semitransparentes.

Selector por Atributos

- Uso: seleccionar elementos según atributos HTML.  
- Sintaxis: selector[atributo]{}
- Sintaxis:selector[atributo~="valor"] para seleccionar elementos que contengan un valor específico en un atributo.
- Sintaxis:selector[atributo*="va"] para seleccionar elementos con un valor de atributo que contenga "va".

  `css
  input[type="text"] { … }
  a[href^="https"] { … }
  `
- Uso común: formularios, enlaces externos, estados personalizados.
-- ademas se puede seleccionar solo el [atributo].
Unidades de Medida

Unidad  Representa  Uso común
px  píxeles  tamaños fijos -absoluta
%  porcentaje de contenedor  layouts fluidos -relativa
em  -relativa al tamaño de fuente  tipografía escalable. 1 em = tamaño fuente del elemento padre, se multiplica el em por el tamanio de fuente en px 1.5 em a 16 px = 24 px
rem se basa en el tamaño de fuente raiz lo que la hace mas predecible -relativa. rem 1.5 multiplica el tamaño de la ventana en 1.5
vw/vh  porcentaje del ancho/alto del viewport(ventana) del navegador. 50vh = 50% del alto de la ventana, 100vw = 100% del ancho de la ventana.
vmin/vmax  representan el tamaño mínimo o máximo entre el ancho y alto del viewport

Especificidad y !important
- Especificidad: Jerarquicamente los id van por encima de todo, luego clase y luego el atributo de elemento
- Conflicto de reglas:
  `css
  p { color: black; }
  .especial { color: red; }
  p.especial { color: blue !important; }
  `
- Uso común: !important fuerza prioridad, pero conviene usar con moderación.

Flexbox

- Sintaxis:
  `css
  display: flex;
  justify-content: space-between;
  align-items: center;
  flex-wrap: wrap;
  `
- Uso común: layouts flexibles sin floats, alineación dinámica de elementos.

Grid

- Sintaxis:
  `css
  display: grid;
  grid-template-columns: 1fr 2fr;
  grid-template-rows: auto 100px;
  gap: 10px;
  `
- Uso común: diseños de dashboard, galería compleja, estructuras de varias columnas y filas.

Media Queries
-se usa media screen and
(operqcion){se sobreescriben las declaraciones aca}
- Sintaxis:
  `css
  @media screen and (max-width: 768px) {
    body { font-size: 14px; }
  }
  `
- Uso común: adaptar estilos a dispositivos móviles, tablets y pantallas grandes.

Transiciones

- Sintaxis:
-- para ajustar velocidad se usa transition-timing-function: ease,ease-in,ease-out, ease-in-out.
  `css
  button {
    transition: background 0.3s ease;
  }
  `
- Uso común: suavizar cambios en hover, focus o cambios de clase.

Animaciones
-Sintaxis: se define un nombre de animacion a eleccion, luego con keyframe se programa.
-- animation: animacion tiempo curva infinite

.elemento {
    animation: fadeIn 1s ease-in-out;
  }
- Definición:
  `css
  @keyframes fadeIn {
    from { opacity: 0; }
    to   { opacity: 1; }
  }
  tambien se puede usar:
 @keyframes fadeIn {
    0% { opacity: 0; }
    50%   { opacity: 0.5; }
    100%  { opacity: 1; }
  }
  .elemento {
    animation: fadeIn 1s ease-in-out;
  }
  `
- Uso común: loaders, entradas de secciones, feedback visual.
